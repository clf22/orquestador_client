import { Component, Input } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { HttpService } from '../../http.service';

@Component({
  selector: 'app-form',
  templateUrl: './form.component.html',
  styleUrls: ['./form.component.scss']
})

export class FormComponent {
  public myForm!: FormGroup;
  public visibleForm:boolean = false
  @Input() public iconForm:any
  @Input() public fields:any[] = []
  @Input() public name?:string
  @Input() public submitFn:any
  @Input() public service:any
  public form:any[] = []
  
  
  constructor(
    private fb: FormBuilder,
    private toast: ToastrService,
  ){
  }

  async ngOnInit(){
    this.myForm=this.fb.group({});
  }

  async ngOnChanges() {
    if(typeof this.myForm !== "undefined") {
      if (this.fields && Object.keys(this.myForm.value).length === 0) {
        console.log('Se llama a buildForm');
        await this.buildForm();
      }
    }
  }

  async onSubmit() {
    if(this.myForm.invalid) {
      const invalidFields = Object.keys(this.myForm.controls).filter(field => {
        return this.myForm.controls[field].invalid;
      });
      this.toast.error(`Rellene los campos: ${invalidFields.join(', ')}`)
      return
    }
    try {
      await this.service.create({form: this.myForm.value})
      this.toast.success(`${this.name?.toUpperCase()} creado correctamente`, 'Exito!')
      this.myForm.reset()
      this.service.getData()
    } catch (error:any) {
      console.error(error);
      this.toast.error(error.error, `Algo fue mal!`)
    }
  }

  public toggleForm() {
    let form:any = document.querySelector('div .form')
    let newUserButton:any = document.querySelector('div .form-container button')
    
    if (form) {
      if(!this.visibleForm) {
        newUserButton.classList.add('form-active')
        form.classList.remove('form-hide');
        form.classList.add('form-open');
      } else {
        newUserButton.classList.remove('form-active')
        form.classList.remove('form-open');
        form.classList.add('form-hide');
      }
    }
    this.visibleForm = !this.visibleForm
  }
  
  private async buildForm():Promise<any> {
    this.form = [] 
    for(let field of this.fields) {
      let input = null
      let value = null
      let options = null

      // if primary key or autoGenerate - omit
      if (field[1].primaryKey || field[1]._autoGenerated) continue
      // if has references of other models - use select
      if (field[1].references) {
        input = 'select'
        value = ''
        options = field[1].options
      }
      // identify type of input field
      else {
        switch (field[1].dataType) {
          case 'INTEGER':
            input = 'number'
            value = 0
            break;

          case 'BOOLEAN':
            input = 'checkbox'
            value = false
            break;

          case 'DATE':
            input = 'date'
            break;
        
          default:
            input = 'text'
            value = ''
            break;
        }
      }
      // if not allow null and not default value - field required
      if (!field[1].allowNull && !field[1].defaultValue) this.myForm.addControl(field[0], this.fb.control(value, Validators.required))
      else this.myForm.addControl(field[0], this.fb.control(value))
      this.form.push([field[0], input, options])
    }
  }

  handlerCheckbox(event:any){
    const formElement = this.myForm.get(event.target.name)
    formElement?.setValue(event.target.checked)
  }
}
