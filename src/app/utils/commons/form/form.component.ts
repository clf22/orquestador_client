import { Component, Input } from '@angular/core';
import { faUserPlus } from '@fortawesome/free-solid-svg-icons';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-form',
  templateUrl: './form.component.html',
  styleUrls: ['./form.component.scss']
})

export class FormComponent {
  public myForm!: FormGroup;
  public iconNewUser:any = faUserPlus
  public visibleForm:boolean = false
  @Input() public fields:any[] = []
  @Input() public name?:string
  public form:any[] = []
  
  
  constructor(
    private fb: FormBuilder,
    private toast: ToastrService
  ){
  }

  async ngOnInit(){
    console.log('On init Form component');
  }

  async onSubmit() {
    if(this.myForm.invalid) {
      const invalidFields = Object.keys(this.myForm.controls).filter(field => {
        return this.myForm.controls[field].invalid;
      });
      this.toast.error(`Rellene los campos: ${invalidFields.join(', ')}`)
      return
    }/*
    let resp = await this.http.request('POST', 'http://localhost:3000/api/user', {
      body: this.myForm.value,
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
    })

    this.toast.success('Usuario creado correctamente', 'Exito!')*/
  }

  public toggleForm() {
    let form:any = document.querySelector('div .form')
    let newUserButton:any = document.querySelector('div .form-container button')
    
    if (form) {
      if(!this.visibleForm) {
        newUserButton.classList.add('form-active')
        form.classList.remove('form-hide');
        form.classList.add('form-open');
      } else {
        newUserButton.classList.remove('form-active')
        form.classList.remove('form-open');
        form.classList.add('form-hide');
      }
    }
    this.visibleForm = !this.visibleForm
  }

  async ngOnChanges() {
    this.myForm=this.fb.group({});
    if(this.fields) {
      await this.buildForm()
    }
  }

  private async buildForm():Promise<any> {
    let itemForm:any = {}
    this.form = []
    
    for(let field of this.fields) {
      // if primary key or autoGenerate - omit
      if (field[1].primaryKey || field[1]._autoGenerated) continue
      // if defaultValue - not required
      if (!field[1].allowNull && !field[1].defaultValue) this.myForm.addControl(field[0], this.fb.control('', Validators.required))
      // required fields
      else this.myForm.addControl(field[0], this.fb.control(''))
      
      this.form.push(field[0])
    }
  }
}
